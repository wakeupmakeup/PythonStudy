# 집합 자료형을 만드는 방법. 
# set 키워드를 사용해서 만든다. 

s1 = set([1,2,3])
print(s1)       # -> {1,2,3}

# 위와 같이 set() 괄호안에 리스트를 입력해서 만들거나 문자열을 입력해서 만들 수도 있다. 

s2 = set("Hello")
print(s2)       #->{'e', 'H', 'l', 'o'} 집합 특성상 중복되는 것은 생략한다. 

# 집합의 특성. 
# 1. 중복을 허용 하지 않는다. 
# 2. 순서가 없다. 

# 리스트와 튜플은 순서가 있기 때문에 인덱싱을 통해서 자료형의 값을 얻을 수 있었다. 하지만 집합은 순서가 없기 때문에 인덱싱으로 값을 얻을 수 없다. 
# 만약 set 자료형에 저장된 값을 인덱싱으로 접근하려면 다음과 같이 리스트나 튜플로 변환 후 해야한다. 

s1 = set([1,2,3])
l1 = list(s1)
print(l1)       #-> [1, 2, 3]
print(l1[0])    #-> 1

t1 = tuple(s1)
print(t1)       #-> (1, 2, 3)

print(t1[0])    #-> 1



# 집합 자료형 활용하는 방법. 
# 교집합, 합집합, 차집합 구하기. 

# 다음과 같이 2개의 swt 자료형을 만든 후 따라해보자. 

s1 = set([1,2,3,4,5,6])
s2 = set([4,5,6,7,8,9])

# 교집합. 

s1 & s2 
print(s1 & s2)      #-> {4, 5, 6}

# &을 사용해도 되지만 아래 처럼 해도 같게 나오긴 한다. 하지만 복잡해서 안하는게 좋다고 생각함. 

s1.intersection(s2)


# 합집합 

s1 | s2
print(s1|s2) # -> {1, 2, 3, 4, 5, 6, 7, 8, 9}

# 혹은 
s1.union(s2)

# 차집합. 
s1 - s2 
print(s1-s2)        # -> {1, 2, 3}

#  혹은 

s1.difference(s2)

# 집합 관련 함수들 

# 값 하나 추가하기 add 

s1 = set([1,2,3])
s1.add(4) 
print(s1.add(4))

# 값 여러 개 추가하기. 

s1 = set([1,2,3])
s1.update([4,5,6])


# 특정 값 제거하기

s1 = set([1,2,3])
s1.remove(2)

