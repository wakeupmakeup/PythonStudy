# 튜플 자료형
# 튜플이 뭔데? -> 보자기 안에 여러 구슬이 들어있는 것이라 생각하자.
# 튜플은 리스트와 비슷하지만 리스트가 제공하는 생성, 삭제, 수정이 불가능하다.

t1 = ()
t2 = (1,)
t3 = (1,2,3)
t4 = 1,2,3
t5 = ('a','b',('ab', 'cd'))
# 튜플의 다양한 모습이다. 튜플안에 튜플이 들어 갈 수도 있다.
# 그리고 t2를 보면 리스트와 다른점이 요소 하나만 가질때 반드시 끝에 ,를 해야한다.

# 튜플을 왜 쓸까? 리스트는 값의 수정과 생성이 가능하지만 튜플은 그렇지 않다고 배웠다. 그러면 해당 값이 변하지 않기를 바라거나 값이 바뀔까
# 걱정이 들때 튜플을 사용하자

# 변하지 않는다는데 수정과 삭제는 어떻게 하나?
# -> 답은 불가능하다. 시도하면 오류창이 뜬다.

# 인덱싱, 슬라이싱, 더하기(+), 곱하기(*)

# 1. 인덱싱하기

t1 = (1,2,'a','b')
print(t1[0])
# -> 1
print(t1[3])
# -> 'b'

# 2. 슬라이싱하기
t1 = (1,2,'a','b')
t1[1:] # 1부터 끝까지
print(t1[1:])
# -> (2, 'a', 'b')


# 3. 튜플 더하기
t2 = (3,4)
t1 + t2
print(t1 + t2)
# -> (1,2,'a','b',3,4)

# 4. 튜플 곱하기
t2 * 3
print(t2 * 3)
# -> (3, 4, 3, 4, 3, 4)

# 딕셔너리 자료형
# 딕셔너리. 사전이라는 뜻인가? 이게 뭔지 알아보자
# 사람은 누구든지 이름, 생일등등 연관되는 정보가 있다. 이름 = 김태경 이런 것 처럼. 일르 대응관계라고 한다.
# 그리고 이 대응관계를 나타내는 자료형이 있는데 이를 연관 배열 혹은 해시라고 한다. 이런 자료형을 딕셔너리라고 한다.
# 딕셔너리는 Key와 Value라는 것을 한 쌍으로 갖는 자료형이다. 예를들어 야구 = "BaseBall" 이런 것 처럼.

# 딕셔너리는 리스트나 튜플처럼 순차적으로 요소값을 구하지 않고 앞서 말한 Key를 통해서 값을 얻는다.

# 만드는 방법.
# 아래는 기본적인 딕셔너리의 모습이다.
# {Key1: Value1, Key2: Value2, Key3: Value3 ...}
# 키와 값이 {}으로 둘러싸여 있다. 각 요소는 쉼표(,)로 구분되어 진다.

dic = {'name': 'pey', 'phone': '01031051111', 'birth': '1111'}
#위에 요소들은 각각 대응한다.
# name = pey
# phone = 01031051111
# brith = 1111

# 아래 예시는 Key로 정수값 1, 값으로 '안녕'이라는 문자열을 사용한 예이다.

a = {1:'안녕'}

# 또한 값에 리스트도 넣을 수 있다.

b = {'a':[1,2,3]}

# 딕셔너리 쌍 추가, 삭제하기.

# 추가

a = {1:'안녕'}
a[2] = 'b' # <- {2:'b'} 쌍 추가
print(a)
# -> {1: '안녕', 2: 'b'}

a['name'] = 'pey'  # <- {'name':'pey'} 쌍 추가.
print(a)
# -> {1: '안녕', 2: 'b', 'name': 'pey'}

a[3] = [1,2,3] # <- {3:[1,2,3]}쌍 추가.
print(a)
# -> {1: '안녕', 2: 'b', 'name': 'pey', 3: [1, 2, 3]}

# 딕셔너리 요소 삭제하기

del a[1]
# -> {'name': 'pey', 3: [1,2,3], 2: 'b'}

# 이걸 왜 사용할까?
# 예를 들어서 4명의 사람이 있다고 가정하고 각자의 특기를 표현할 수 있는 방법에 대해서 생각해보자.
# 리스트나 문자열로는 표현하기가 상당히 까다로울 것이다. 이 딕셔너리를 이용하면 쉬워진다!

{"김연아":"피겨스케이팅","김광현":"야구", "손흥민":"축구", "나":"프로그래밍"}
# 위에 표현문은 하나의 예시다. 사람 이름과 특기를 한 쌍으로 하는 딕셔너리로 볼 수 있다. 이제는 이것을 활용하기 위해선 알아야할 것들이 많다. 알아보자!

# 딕셔너리에서 Key 사용해 Value 얻기
grade = {'pey': 10, 'kim': 99} #-> 딕셔너리는 항상 소괄호임을 잊지말자.
grade['pey'] #-> Key가 'pey'인 딕셔너리의 Value를 반환함. 출력은 10
grade['kim'] #-> 99

# 이렇게 리스트나 튜플, 문자열은 요소값을 얻어내고자 할때 인덱싱(참조)이나 슬라이싱 기법 중 하나를 이용함. 하지만 딕셔너리는 단 한가지 방법뿐이다.
# 키를 사용해서 값을 얻어내는 방법. (열쇠로 따서 상자안의 물건을 꺼내는 것과 같음)
# 몇 가지 예시를 또 보자면...

a = {1:'a', 2:'b'}
a[1] # -> 'a'

a[2] # -> 'b'

print(a[1])
print(a[2])
# 직접 출력 값을 확인해보자.

# 만약 키와 값을 뒤집는다면?

a = {'a':1,'b':2}

print(a['a'])
print(a['b'])

# 상관없이 가능하다!

# 만들때 주의사항 ! ! !
# 키는 고유한 값이므로 중복되는 키값을 설정해 놓으면 하나를 제외한 나머지 것들이 모두 무시된다는 점을 주의하자.
# 정리하자면 중복되는 키값을 사용하지 말자. 왜 무시되냐면 여러가지 동일한 Key에 해당하는 특정 Value를 뽑아야 할지 모르기 때문이다.
# 마지막으론 Key에는 리스트를 사용할 수가 없다. 하지만 튜플은 사용할 수 있다. 리스트의 속성은 변경이 가능하고 튜플은 그것이 불가능 하기 때문이다.


# 딕셔너리 관련 여러 함수들을 알아보자!


# 리스트 만들기 (keys)
a = {'name': 'pey', 'phone': '01012345678', 'birth': '1118'}
print(a.keys())
#-> 출력은 이렇게 나온다. dict_keys(['name', 'phone', 'birth'])
#a.keys()는 딕셔너리의 a의 Key들만 모아서 dict_keys라는 객체를 리턴한다. 또 이를 통해서 아래와 같은 표현도 가능하다.

for k in a.keys():
    print(k)

# name
# phone
# birth

# 나온 저것들을 리스트로 하고싶다면? 이렇게 하면 된다.

print(list(a.keys()))
# -> ['name', 'phone', 'birth']

# Value 리스트 만들기
a.values()
print(a.values())       # -> dict_values(['pey', '01012345678', '1118'])

#둘다(쌍) 얻고 싶다면?
a.items()
print(a.items())        # -> dict_items([('name', 'pey'), ('phone', '01012345678'), ('birth', '1118')])

# Key: Value쌍 모두 지우기
a.clear()
print(a.clear())        #-> None

# Key로 Value얻기(Get)
a = {'name':'pey', 'phone':'01012345678', 'birth':'1118'}
a.get('name')
a.get('phone')

print(a.get('name'))        # -> pey
print(a.get('phone'))       # -> 01012345678

# 해당 Key가 딕셔너리 안에 있는지 조사하기.
a = {'name': 'pey', 'phone': '01012345678', 'birth': '1118'}

print('name' in a)      # -> true
print('wrong' in a)     # -> False


